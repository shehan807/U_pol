Log started at: 2025-02-18 17:40:23
%%%%%%%%%%% STARTING IMIDAZOLE U_IND CALCULATION %%%%%%%%%%%%
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-OpenMM Output-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
total Energy = -0.027930725595069816 kJ/mol
<class 'openmm.openmm.NonbondedForce'>-0.02796626091003418 kJ/mol
<class 'openmm.openmm.DrudeForce'>3.553531496436335e-05 kJ/mol
<class 'openmm.openmm.CMMotionRemover'>0.0 kJ/mol
natoms_per_res=9
natoms=14
ncore=10
nmol=2
residue_list=<generator object Topology.residues at 0x1555123417d0>
tholeMatrix.shape=(2, 9, 9)
Unable to initialize backend 'rocm': module 'jaxlib.xla_extension' has no attribute 'GpuAllocatorConfig'
Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
U_self = Traced<ConcreteArray(0.0, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(0., dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x155511a99a40>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ConcreteArray(0.5, dtype=float64):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x15550cae93a0; to 'JaxprTracer' at 0x15550cae9360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550caf4700>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ConcreteArray(-0.02789939154147354, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(-0.02789939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ca4e960>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ConcreteArray(138.93545764438198, dtype=float64):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x1554ecbb5ad0; to 'JaxprTracer' at 0x1554ecbb5a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ecbc0220>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = -0.027899391541432565 kJ/mol
U_ind = Traced<ConcreteArray(-4.0974168502572184e-14, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(-4.09741685e-14, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ca4f060>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x1554ecbe15d0; to 'JaxprTracer' at 0x1554ecbe1590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ecbc3e20>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecaca660>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ecb8a700; to 'JaxprTracer' at 0x1554ecb8a6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ecb95540>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecacb970>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ec9eb420; to 'JaxprTracer' at 0x1554ec9eb3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec9ef760>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecacb9d0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ec9ebce0; to 'JaxprTracer' at 0x1554ec9ebca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec9fcd30>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecaca350>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ecba77e0; to 'JaxprTracer' at 0x1554ecba7d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554eca37df0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecaa4290>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ecaaa3e0; to 'JaxprTracer' at 0x1554ecaaa3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ecaa30a0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecaa4300>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ecaaac50; to 'JaxprTracer' at 0x1554ecaaac10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec8b80a0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecacb560>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ec9eab60; to 'JaxprTracer' at 0x1554ec9ea4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec8bbc40>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ec900860>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ec912480; to 'JaxprTracer' at 0x1554ec912440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec914e50>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ec9008d0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550d0aaa70; to 'JaxprTracer' at 0x15550c0edc20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550caf5510>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecaca430>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554eccfb9c0; to 'JaxprTracer' at 0x1554eccfa670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554eca96800>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550c994ca0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554ecb8b8d0; to 'JaxprTracer' at 0x1554ecb172f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550ca42350>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550c994d10>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554ecb89bc0; to 'JaxprTracer' at 0x1554ecb893b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550ca43730>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecacb2c0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554eccf88b0; to 'JaxprTracer' at 0x1554eccfaa30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec937100>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550c994f80>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554eca9e840; to 'JaxprTracer' at 0x1554eca9fa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec993730>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550c9944a0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554eca9df80; to 'JaxprTracer' at 0x1554eca9dea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec9946a0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecaca560>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x15550ca5b060; to 'JaxprTracer' at 0x15550ca59d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec9971f0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550c9940e0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554ecb5d170; to 'JaxprTracer' at 0x1554ecb5d090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec7f35b0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550c994540>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554ecb5ea20; to 'JaxprTracer' at 0x1554ecb5db30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec800460>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

JAXOPT.BFGS Minimizer completed in 45.409 seconds!!
U_self = 1.0624437900737302e-05 kJ/mol
U_coul = -0.027921319462772598 kJ/mol

U_coul_static = -0.027899391541432565 kJ/mol
U_ind = -1.1303483439296189e-05 kJ/mol

OpenMM U_ind = -0.0279307 kJ/mol
Python U_ind = -0.0279107 kJ/mol
0.07% Error
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

