Log started at: 2025-02-17 18:54:09
%%%%%%%%%%% STARTING ACNIT U_IND CALCULATION %%%%%%%%%%%%
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-OpenMM Output-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
total Energy = 30.6384220123291 kJ/mol
<class 'openmm.openmm.NonbondedForce'>23.253997802734375 kJ/mol
<class 'openmm.openmm.DrudeForce'>7.384424209594727 kJ/mol
<class 'openmm.openmm.CMMotionRemover'>0.0 kJ/mol
natoms_per_res=6
natoms=9
ncore=6
nmol=2
residue_list=<generator object Topology.residues at 0x155512343100>
tholeMatrix.shape=(2, 6, 6)
screened_params=[0, 1, 2.0]
drude0=6
core0=0
alpha0=0.002324
imol=0
prt1_params=[7, 1, -1, -1, -1, Quantity(value=-0.716, unit=elementary charge), Quantity(value=0.00076, unit=nanometer**3), 0.0, 0.0]
drude1=7
core1=1
alpha1=0.00076
thole=2.0
(core0,natoms)=(0,9)
(core1,natoms)=(1,9)
(core0,natoms)=(0,9)
(core1,natoms)=(1,9)
tholeMatrix = [[[ 0.         18.19093588  0.          0.          0.
    0.        ]
  [18.19093588  0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]

 [[ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]]
screened_params=[0, 2, 2.0]
drude0=6
core0=0
alpha0=0.002324
imol=0
prt1_params=[8, 2, -1, -1, -1, Quantity(value=-1.015, unit=elementary charge), Quantity(value=0.001527, unit=nanometer**3), 0.0, 0.0]
drude1=8
core1=2
alpha1=0.001527
thole=2.0
(core0,natoms)=(0,9)
(core1,natoms)=(2,9)
(core0,natoms)=(0,9)
(core1,natoms)=(2,9)
tholeMatrix = [[[ 0.         18.19093588 16.19387573  0.          0.
    0.        ]
  [18.19093588  0.          0.          0.          0.
    0.        ]
  [16.19387573  0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]

 [[ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]]
screened_params=[1, 2, 2.0]
drude0=7
core0=1
alpha0=0.00076
imol=0
prt1_params=[8, 2, -1, -1, -1, Quantity(value=-1.015, unit=elementary charge), Quantity(value=0.001527, unit=nanometer**3), 0.0, 0.0]
drude1=8
core1=2
alpha1=0.001527
thole=2.0
(core0,natoms)=(1,9)
(core1,natoms)=(2,9)
(core0,natoms)=(1,9)
(core1,natoms)=(2,9)
tholeMatrix = [[[ 0.         18.19093588 16.19387573  0.          0.
    0.        ]
  [18.19093588  0.         19.50987817  0.          0.
    0.        ]
  [16.19387573 19.50987817  0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]

 [[ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]]
screened_params=[3, 4, 2.0]
drude0=15
core0=9
alpha0=0.002324
imol=1
prt1_params=[16, 10, -1, -1, -1, Quantity(value=-0.716, unit=elementary charge), Quantity(value=0.00076, unit=nanometer**3), 0.0, 0.0]
drude1=16
core1=10
alpha1=0.00076
thole=2.0
(core0,natoms)=(9,9)
(core1,natoms)=(10,9)
(core0,natoms)=(0,9)
(core1,natoms)=(1,9)
tholeMatrix = [[[ 0.         18.19093588 16.19387573  0.          0.
    0.        ]
  [18.19093588  0.         19.50987817  0.          0.
    0.        ]
  [16.19387573 19.50987817  0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]

 [[ 0.         18.19093588  0.          0.          0.
    0.        ]
  [18.19093588  0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]]
screened_params=[3, 5, 2.0]
drude0=15
core0=9
alpha0=0.002324
imol=1
prt1_params=[17, 11, -1, -1, -1, Quantity(value=-1.015, unit=elementary charge), Quantity(value=0.001527, unit=nanometer**3), 0.0, 0.0]
drude1=17
core1=11
alpha1=0.001527
thole=2.0
(core0,natoms)=(9,9)
(core1,natoms)=(11,9)
(core0,natoms)=(0,9)
(core1,natoms)=(2,9)
tholeMatrix = [[[ 0.         18.19093588 16.19387573  0.          0.
    0.        ]
  [18.19093588  0.         19.50987817  0.          0.
    0.        ]
  [16.19387573 19.50987817  0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]

 [[ 0.         18.19093588 16.19387573  0.          0.
    0.        ]
  [18.19093588  0.          0.          0.          0.
    0.        ]
  [16.19387573  0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]]
screened_params=[4, 5, 2.0]
drude0=16
core0=10
alpha0=0.00076
imol=1
prt1_params=[17, 11, -1, -1, -1, Quantity(value=-1.015, unit=elementary charge), Quantity(value=0.001527, unit=nanometer**3), 0.0, 0.0]
drude1=17
core1=11
alpha1=0.001527
thole=2.0
(core0,natoms)=(10,9)
(core1,natoms)=(11,9)
(core0,natoms)=(1,9)
(core1,natoms)=(2,9)
tholeMatrix = [[[ 0.         18.19093588 16.19387573  0.          0.
    0.        ]
  [18.19093588  0.         19.50987817  0.          0.
    0.        ]
  [16.19387573 19.50987817  0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]

 [[ 0.         18.19093588 16.19387573  0.          0.
    0.        ]
  [18.19093588  0.         19.50987817  0.          0.
    0.        ]
  [16.19387573 19.50987817  0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]]
Unable to initialize backend 'rocm': module 'jaxlib.xla_extension' has no attribute 'GpuAllocatorConfig'
Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
%%%%%%%%%%%%%%%%%%%%%% Printing polarization.py elements %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
r_core = [[[ 0.0011      0.          0.368     ]
  [-0.001       0.0014      0.2159    ]
  [ 0.          0.          0.1       ]
  [-0.0867     -0.0402      0.4199    ]
  [ 0.0081      0.1046      0.39660001]
  [ 0.0924     -0.0418      0.41190001]]

 [[ 0.0011      0.         -0.368     ]
  [-0.001       0.0014     -0.2159    ]
  [ 0.          0.         -0.1       ]
  [-0.0867     -0.0402     -0.4199    ]
  [ 0.0081      0.1046     -0.39660001]
  [ 0.0924     -0.0418     -0.41190001]]]
r_core[jnp.newaxis, :, jnp.newaxis, :] = [[[[[ 0.0011      0.          0.368     ]
    [-0.001       0.0014      0.2159    ]
    [ 0.          0.          0.1       ]
    [-0.0867     -0.0402      0.4199    ]
    [ 0.0081      0.1046      0.39660001]
    [ 0.0924     -0.0418      0.41190001]]]


  [[[ 0.0011      0.         -0.368     ]
    [-0.001       0.0014     -0.2159    ]
    [ 0.          0.         -0.1       ]
    [-0.0867     -0.0402     -0.4199    ]
    [ 0.0081      0.1046     -0.39660001]
    [ 0.0924     -0.0418     -0.41190001]]]]]
r_core.shape=(2, 6, 3) -> (1, 2, 1, 6, 3); Rij.shape = (2, 2, 6, 6, 3)

Rij = [[[[[ 0.          0.          0.        ]
    [-0.0021      0.0014     -0.1521    ]
    [-0.0011      0.         -0.268     ]
    [-0.0878     -0.0402      0.0519    ]
    [ 0.007       0.1046      0.02860001]
    [ 0.0913     -0.0418      0.04390001]]

   [[ 0.0021     -0.0014      0.1521    ]
    [ 0.          0.          0.        ]
    [ 0.001      -0.0014     -0.1159    ]
    [-0.0857     -0.0416      0.204     ]
    [ 0.0091      0.1032      0.1807    ]
    [ 0.0934     -0.0432      0.19600001]]

   [[ 0.0011      0.          0.268     ]
    [-0.001       0.0014      0.1159    ]
    [ 0.          0.          0.        ]
    [-0.0867     -0.0402      0.3199    ]
    [ 0.0081      0.1046      0.29660001]
    [ 0.0924     -0.0418      0.31190001]]

   [[ 0.0878      0.0402     -0.0519    ]
    [ 0.0857      0.0416     -0.204     ]
    [ 0.0867      0.0402     -0.3199    ]
    [ 0.          0.          0.        ]
    [ 0.0948      0.1448     -0.02329999]
    [ 0.1791     -0.0016     -0.00799999]]

   [[-0.007      -0.1046     -0.02860001]
    [-0.0091     -0.1032     -0.1807    ]
    [-0.0081     -0.1046     -0.29660001]
    [-0.0948     -0.1448      0.02329999]
    [ 0.          0.          0.        ]
    [ 0.0843     -0.1464      0.01530001]]

   [[-0.0913      0.0418     -0.04390001]
    [-0.0934      0.0432     -0.19600001]
    [-0.0924      0.0418     -0.31190001]
    [-0.1791      0.0016      0.00799999]
    [-0.0843      0.1464     -0.01530001]
    [ 0.          0.          0.        ]]]


  [[[ 0.          0.         -0.736     ]
    [-0.0021      0.0014     -0.5839    ]
    [-0.0011      0.         -0.468     ]
    [-0.0878     -0.0402     -0.7879    ]
    [ 0.007       0.1046     -0.76460001]
    [ 0.0913     -0.0418     -0.77990001]]

   [[ 0.0021     -0.0014     -0.5839    ]
    [ 0.          0.         -0.43180001]
    [ 0.001      -0.0014     -0.31590001]
    [-0.0857     -0.0416     -0.6358    ]
    [ 0.0091      0.1032     -0.61250001]
    [ 0.0934     -0.0432     -0.62780002]]

   [[ 0.0011      0.         -0.468     ]
    [-0.001       0.0014     -0.31590001]
    [ 0.          0.         -0.2       ]
    [-0.0867     -0.0402     -0.5199    ]
    [ 0.0081      0.1046     -0.49660001]
    [ 0.0924     -0.0418     -0.51190002]]

   [[ 0.0878      0.0402     -0.7879    ]
    [ 0.0857      0.0416     -0.6358    ]
    [ 0.0867      0.0402     -0.5199    ]
    [ 0.          0.         -0.8398    ]
    [ 0.0948      0.1448     -0.81650001]
    [ 0.1791     -0.0016     -0.83180001]]

   [[-0.007      -0.1046     -0.76460001]
    [-0.0091     -0.1032     -0.61250001]
    [-0.0081     -0.1046     -0.49660001]
    [-0.0948     -0.1448     -0.81650001]
    [ 0.          0.         -0.79320002]
    [ 0.0843     -0.1464     -0.80850002]]

   [[-0.0913      0.0418     -0.77990001]
    [-0.0934      0.0432     -0.62780002]
    [-0.0924      0.0418     -0.51190002]
    [-0.1791      0.0016     -0.83180001]
    [-0.0843      0.1464     -0.80850002]
    [ 0.          0.         -0.82380003]]]]



 [[[[ 0.          0.          0.736     ]
    [-0.0021      0.0014      0.5839    ]
    [-0.0011      0.          0.468     ]
    [-0.0878     -0.0402      0.7879    ]
    [ 0.007       0.1046      0.76460001]
    [ 0.0913     -0.0418      0.77990001]]

   [[ 0.0021     -0.0014      0.5839    ]
    [ 0.          0.          0.43180001]
    [ 0.001      -0.0014      0.31590001]
    [-0.0857     -0.0416      0.6358    ]
    [ 0.0091      0.1032      0.61250001]
    [ 0.0934     -0.0432      0.62780002]]

   [[ 0.0011      0.          0.468     ]
    [-0.001       0.0014      0.31590001]
    [ 0.          0.          0.2       ]
    [-0.0867     -0.0402      0.5199    ]
    [ 0.0081      0.1046      0.49660001]
    [ 0.0924     -0.0418      0.51190002]]

   [[ 0.0878      0.0402      0.7879    ]
    [ 0.0857      0.0416      0.6358    ]
    [ 0.0867      0.0402      0.5199    ]
    [ 0.          0.          0.8398    ]
    [ 0.0948      0.1448      0.81650001]
    [ 0.1791     -0.0016      0.83180001]]

   [[-0.007      -0.1046      0.76460001]
    [-0.0091     -0.1032      0.61250001]
    [-0.0081     -0.1046      0.49660001]
    [-0.0948     -0.1448      0.81650001]
    [ 0.          0.          0.79320002]
    [ 0.0843     -0.1464      0.80850002]]

   [[-0.0913      0.0418      0.77990001]
    [-0.0934      0.0432      0.62780002]
    [-0.0924      0.0418      0.51190002]
    [-0.1791      0.0016      0.83180001]
    [-0.0843      0.1464      0.80850002]
    [ 0.          0.          0.82380003]]]


  [[[ 0.          0.          0.        ]
    [-0.0021      0.0014      0.1521    ]
    [-0.0011      0.          0.268     ]
    [-0.0878     -0.0402     -0.0519    ]
    [ 0.007       0.1046     -0.02860001]
    [ 0.0913     -0.0418     -0.04390001]]

   [[ 0.0021     -0.0014     -0.1521    ]
    [ 0.          0.          0.        ]
    [ 0.001      -0.0014      0.1159    ]
    [-0.0857     -0.0416     -0.204     ]
    [ 0.0091      0.1032     -0.1807    ]
    [ 0.0934     -0.0432     -0.19600001]]

   [[ 0.0011      0.         -0.268     ]
    [-0.001       0.0014     -0.1159    ]
    [ 0.          0.          0.        ]
    [-0.0867     -0.0402     -0.3199    ]
    [ 0.0081      0.1046     -0.29660001]
    [ 0.0924     -0.0418     -0.31190001]]

   [[ 0.0878      0.0402      0.0519    ]
    [ 0.0857      0.0416      0.204     ]
    [ 0.0867      0.0402      0.3199    ]
    [ 0.          0.          0.        ]
    [ 0.0948      0.1448      0.02329999]
    [ 0.1791     -0.0016      0.00799999]]

   [[-0.007      -0.1046      0.02860001]
    [-0.0091     -0.1032      0.1807    ]
    [-0.0081     -0.1046      0.29660001]
    [-0.0948     -0.1448     -0.02329999]
    [ 0.          0.          0.        ]
    [ 0.0843     -0.1464     -0.01530001]]

   [[-0.0913      0.0418      0.04390001]
    [-0.0934      0.0432      0.19600001]
    [-0.0924      0.0418      0.31190001]
    [-0.1791      0.0016     -0.00799999]
    [-0.0843      0.1464      0.01530001]
    [ 0.          0.          0.        ]]]]]

q_core = [[1.263 1.004 0.554 0.054 0.054 0.054]
 [1.263 1.004 0.554 0.054 0.054 0.054]]
q_core[:, jnp.newaxis, :, jnp.newaxis] = [[[[1.263]
   [1.004]
   [0.554]
   [0.054]
   [0.054]
   [0.054]]]


 [[[1.263]
   [1.004]
   [0.554]
   [0.054]
   [0.054]
   [0.054]]]]
q_shell = [[-1.252 -0.716 -1.015  0.     0.     0.   ]
 [-1.252 -0.716 -1.015  0.     0.     0.   ]]
q_shell[:, jnp.newaxis, :, jnp.newaxis] = [[[[-1.252]
   [-0.716]
   [-1.015]
   [ 0.   ]
   [ 0.   ]
   [ 0.   ]]]


 [[[-1.252]
   [-0.716]
   [-1.015]
   [ 0.   ]
   [ 0.   ]
   [ 0.   ]]]]

Qi_shell = [[[[-1.252]
   [-0.716]
   [-1.015]
   [ 0.   ]
   [ 0.   ]
   [ 0.   ]]]


 [[[-1.252]
   [-0.716]
   [-1.015]
   [ 0.   ]
   [ 0.   ]
   [ 0.   ]]]]
Qj_shell = [[[[-1.252 -0.716 -1.015  0.     0.     0.   ]]

  [[-1.252 -0.716 -1.015  0.     0.     0.   ]]]]
Qi_core = [[[[1.263]
   [1.004]
   [0.554]
   [0.054]
   [0.054]
   [0.054]]]


 [[[1.263]
   [1.004]
   [0.554]
   [0.054]
   [0.054]
   [0.054]]]]
Qj_core = [[[[1.263 1.004 0.554 0.054 0.054 0.054]]

  [[1.263 1.004 0.554 0.054 0.054 0.054]]]]

q_core.shape=(2, 6) -> Qi_core.shape=(2, 1, 6, 1) & Qj_core.shape = (1, 2, 1, 6)

Dij = [[[0. 0. 0.]
  [0. 0. 0.]
  [0. 0. 0.]
  [0. 0. 0.]
  [0. 0. 0.]
  [0. 0. 0.]]

 [[0. 0. 0.]
  [0. 0. 0.]
  [0. 0. 0.]
  [0. 0. 0.]
  [0. 0. 0.]
  [0. 0. 0.]]]

Thole Screening and Polarization!!
k = [[93709.93356256 93718.54733439 93735.94096377     0.
      0.             0.        ]
 [93709.93356256 93718.54733439 93735.94096377     0.
      0.             0.        ]]
_alphas = [[0.002324 0.00076  0.001527      inf      inf      inf]
 [0.002324 0.00076  0.001527      inf      inf      inf]]
tholes = [[[ 0.         18.19093588 16.19387573  0.          0.
    0.        ]
  [18.19093588  0.         19.50987817  0.          0.
    0.        ]
  [16.19387573 19.50987817  0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]

 [[ 0.         18.19093588 16.19387573  0.          0.
    0.        ]
  [18.19093588  0.         19.50987817  0.          0.
    0.        ]
  [16.19387573 19.50987817  0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]
  [ 0.          0.          0.          0.          0.
    0.        ]]]
u_scale = [[[[ 0.         18.19093588 16.19387573  0.          0.
     0.        ]
   [18.19093588  0.         19.50987817  0.          0.
     0.        ]
   [16.19387573 19.50987817  0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]]

  [[ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]]]


 [[[ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]]

  [[ 0.         18.19093588 16.19387573  0.          0.
     0.        ]
   [18.19093588  0.         19.50987817  0.          0.
     0.        ]
   [16.19387573 19.50987817  0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]
   [ 0.          0.          0.          0.          0.
     0.        ]]]]

%%%%%%%%%%%%%%%%%%%%%% Printing polarization.py elements %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
U_pol = Traced<ConcreteArray(0.0, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(0., dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x155511bcda60>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ConcreteArray(0.5, dtype=float64):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x15550cbe54e0; to 'JaxprTracer' at 0x15550cbe54a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550cbd3550>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ConcreteArray(41.58010216346956, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(41.58010216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550cb46980>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ConcreteArray(138.93545764438198, dtype=float64):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x15550ca75cb0; to 'JaxprTracer' at 0x15550ca75c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550ca6ecb0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={}))

U_pol = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)>

U_pol = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecaddf60>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ecb65ad0; to 'JaxprTracer' at 0x1554ecb65a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ecb5e680>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecadf270>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ec9be7a0; to 'JaxprTracer' at 0x1554ec9be760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec9c4bb0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={}))

U_pol = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecaddc50>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ecba6a70; to 'JaxprTracer' at 0x1554ecba69e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554eca48160>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecadfb20>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554eca611c0; to 'JaxprTracer' at 0x1554eca61180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554eca5b8e0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={}))

U_pol = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecade3a0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ecb65530; to 'JaxprTracer' at 0x1554ecb66620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554eca6bc40>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ec8c4110>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x1554ec8c8d60; to 'JaxprTracer' at 0x1554ec8c8d20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec8c0fa0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={}))

U_pol = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecadf750>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x15550c9bea70; to 'JaxprTracer' at 0x15550c9bffc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ecc51150>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550c9b4550>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554eca63d80; to 'JaxprTracer' at 0x1554eca63e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ecaa1a20>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={}))

U_pol = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecadfdc0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x15550cb57d30; to 'JaxprTracer' at 0x15550cb57b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550c9b4070>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ec918250>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554ecb917b0; to 'JaxprTracer' at 0x1554ecb91b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec916860>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={}))

U_pol = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ecadf730>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x15550ca76340; to 'JaxprTracer' at 0x15550ca74af0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec93d2d0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ec9743e0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1554ecba43b0; to 'JaxprTracer' at 0x1554ecba5b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554ec981660>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={}))

JAXOPT.BFGS Minimizer completed in 37.868 seconds!!
U_pol = 8.862800547735803 kJ/mol
U_coul = 21.775470541767977

OpenMM U_ind = 30.6384 kJ/mol
Python U_ind = 30.6383 kJ/mol
0.00% Error
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

