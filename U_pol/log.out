Log started at: 2025-02-20 12:17:25
%%%%%%%%%%% STARTING IMIDAZOLE U_IND CALCULATION %%%%%%%%%%%%
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-OpenMM Output-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
total Energy = -20.28085624283085 kJ/mol
<class 'openmm.openmm.NonbondedForce'>-20.280838012695312 kJ/mol
<class 'openmm.openmm.DrudeForce'>-1.823013553803321e-05 kJ/mol
<class 'openmm.openmm.CMMotionRemover'>0.0 kJ/mol
natoms_per_res=9
natoms=14
ncore=15
nmol=3
residue_list=<generator object Topology.residues at 0x15551066c1e0>
tholeMatrix.shape=(3, 9, 9)
Unable to initialize backend 'rocm': module 'jaxlib.xla_extension' has no attribute 'GpuAllocatorConfig'
Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
U_self = Traced<ConcreteArray(0.0, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(0., dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ee1a1a90>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ConcreteArray(0.5, dtype=float64):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x1554e852b0b0; to 'JaxprTracer' at 0x1554e852b070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554e8539b10>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ConcreteArray(-20.280501371078504, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(-20.28050137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555103be9b0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ConcreteArray(138.93545764438198, dtype=float64):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x1555100dba10; to 'JaxprTracer' at 0x1555100db9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1555100f8b80>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = -20.28050137107778 kJ/mol
U_ind = Traced<ConcreteArray(-7.247535904753022e-13, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(-7.2475359e-13, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555103bf0b0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x155510107510; to 'JaxprTracer' at 0x1555101074d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1555101205b0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15551000a6b0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550fee8360; to 'JaxprTracer' at 0x15550fee8320>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fee1750>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15551000b9c0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550ff3d080; to 'JaxprTracer' at 0x15550ff3d040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550ff338b0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15551000ba20>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550ff3d940; to 'JaxprTracer' at 0x15550ff3d900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550ff44d60>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15551000a3a0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550fee8540; to 'JaxprTracer' at 0x15550fee8050>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550ff7bfd0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550fdec2e0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550fdf4040; to 'JaxprTracer' at 0x15550fdebfc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fde6f80>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550fdec350>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550fdf48b0; to 'JaxprTracer' at 0x15550fdf4870>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fdf80a0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15551000b850>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550ff3d990; to 'JaxprTracer' at 0x15550ff3de00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fdfbb80>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550fe38850>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x155510354590; to 'JaxprTracer' at 0x155510356710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15551035d0c0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550fe388c0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x155510338ae0; to 'JaxprTracer' at 0x155510338a00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fef9c00>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15551000ac90>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1555102ac5e0; to 'JaxprTracer' at 0x1555102ac4b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fee33d0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555102bcc90>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1555100ae480; to 'JaxprTracer' at 0x1555100aecb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fe4b880>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555102bcd00>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1555100aff10; to 'JaxprTracer' at 0x1555100afc50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1555102e4c70>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15551000a970>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1555100d8040; to 'JaxprTracer' at 0x1555102ac4b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fe3af50>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555102bcf70>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x15550fde9210; to 'JaxprTracer' at 0x15550fde80f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550feb7b80>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555102bc490>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x155510081c60; to 'JaxprTracer' at 0x155510081c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550feb8bb0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15551000ade0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1555101e0a40; to 'JaxprTracer' at 0x155510391db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550febb490>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555102bc0d0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x15550ff03f10; to 'JaxprTracer' at 0x15550ff027b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fd1bb20>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555102bc530>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x15550ff03e70; to 'JaxprTracer' at 0x15550ff024e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fd289d0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

JAXOPT.BFGS Minimizer completed in 21.201 seconds!!
U_self = 0.8677151347193051 kJ/mol
U_coul = -21.95984230669273 kJ/mol

U_coul_static = -20.28050137107778 kJ/mol
U_ind = -0.8116258008956474 kJ/mol

OpenMM U_ind = -20.2808562 kJ/mol
Python U_ind = -21.0921272 kJ/mol
3.85% Error
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Log started at: 2025-02-20 12:19:36
%%%%%%%%%%% STARTING IMIDAZOLE U_IND CALCULATION %%%%%%%%%%%%
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-OpenMM Output-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
total Energy = -21.0927916765213 kJ/mol
<class 'openmm.openmm.NonbondedForce'>-21.929672241210938 kJ/mol
<class 'openmm.openmm.DrudeForce'>0.8368805646896362 kJ/mol
<class 'openmm.openmm.CMMotionRemover'>0.0 kJ/mol
natoms_per_res=9
natoms=14
ncore=15
nmol=3
residue_list=<generator object Topology.residues at 0x15551066c1e0>
tholeMatrix.shape=(3, 9, 9)
Unable to initialize backend 'rocm': module 'jaxlib.xla_extension' has no attribute 'GpuAllocatorConfig'
Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
U_self = Traced<ConcreteArray(0.0, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(0., dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1554ec1b9ac0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ConcreteArray(0.5, dtype=float64):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x1554c80db150; to 'JaxprTracer' at 0x1554c80db110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554c80e63b0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ConcreteArray(-20.280501371078504, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(-20.28050137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555103b69e0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ConcreteArray(138.93545764438198, dtype=float64):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x1555100d3a10; to 'JaxprTracer' at 0x1555100d39d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1555100ec850>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = -20.28050137107778 kJ/mol
U_ind = Traced<ConcreteArray(-7.247535904753022e-13, dtype=float64)>with<JVPTrace(level=2/1)> with
  primal = Array(-7.2475359e-13, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555103b70e0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=1/1)>), out_tracer_refs=[<weakref at 0x1555100ff510; to 'JaxprTracer' at 0x1555100ff4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x155510118580>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=1/1)> kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555100066e0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550fec83b0; to 'JaxprTracer' at 0x15550fec8370>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fed9a80>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555100079f0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550ff350d0; to 'JaxprTracer' at 0x15550ff35090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550ff2bbb0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x155510007a50>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550ff35990; to 'JaxprTracer' at 0x15550ff35950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550ff1d1e0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555100063d0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550fec8590; to 'JaxprTracer' at 0x15550fec86e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fdd04f0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ff8c310>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550fdec090; to 'JaxprTracer' at 0x15550fdec050>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fde3580>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ff8c380>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550fdec900; to 'JaxprTracer' at 0x15550fdec8c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fdf0550>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x155510007880>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15550ff359e0; to 'JaxprTracer' at 0x15550ff35e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fdf3f70>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ff8c880>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15551034c630; to 'JaxprTracer' at 0x15551034e760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550feed690>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=4/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=2/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=3/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ff8c8f0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=3/1)>), out_tracer_refs=[<weakref at 0x15551032cb80; to 'JaxprTracer' at 0x15551032caa0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1555103b95a0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x155510006cc0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1555102a85e0; to 'JaxprTracer' at 0x1555102a84b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fdd4a90>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ff8ccc0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1555100afd30; to 'JaxprTracer' at 0x1555100ad0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fe43af0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ff8cd30>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1555100afc40; to 'JaxprTracer' at 0x1555100aeb20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x1554c8144e80>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x1555100069a0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1555100d0040; to 'JaxprTracer' at 0x1555102a84b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fe4b520>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ff8cfa0>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x15550fde5260; to 'JaxprTracer' at 0x15550fde4140>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550feaf9a0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ff8ca80>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x155510079d00; to 'JaxprTracer' at 0x155510079cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550feb09a0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_self = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x155510006e10>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x1555101d8a40; to 'JaxprTracer' at 0x155510389db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550feb3370>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol
U_coul = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ff8c640>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x15550fefbf60; to 'JaxprTracer' at 0x15550fefa4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = mul b a in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_multiply', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fd135b0>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

U_coul_static = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)> kJ/mol
U_ind = Traced<ShapedArray(float64[])>with<JVPTrace(level=5/1)> with
  primal = Traced<ShapedArray(float64[])>with<DynamicJaxprTrace(level=3/1)>
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=4/1)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x15550ff8cb20>, in_tracers=(Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>, Traced<ShapedArray(float64[]):JaxprTrace(level=4/1)>), out_tracer_refs=[<weakref at 0x15550fef9490; to 'JaxprTracer' at 0x15550fef8960>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[] b:f64[]. let c:f64[] = add a b in (c,) }, 'in_shardings': (UnspecifiedValue, UnspecifiedValue), 'out_shardings': (UnspecifiedValue,), 'in_layouts': (None, None), 'out_layouts': (None,), 'resource_env': None, 'donated_invars': (False, False), 'name': '_add', 'keep_unused': False, 'inline': True}, effects=set(), source_info=<jax._src.source_info_util.SourceInfo object at 0x15550fd28460>, ctx=JaxprEqnContext(compute_type=None, threefry_partitionable=False, xla_metadata={})) kJ/mol

JAXOPT.BFGS Minimizer completed in 10.992 seconds!!
U_self = 0.8677151347193051 kJ/mol
U_coul = -21.95984230669273 kJ/mol

U_coul_static = -20.28050137107778 kJ/mol
U_ind = -0.8116258008956474 kJ/mol

OpenMM U_ind = -21.0927917 kJ/mol
Python U_ind = -21.0921272 kJ/mol
0.00% Error
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

